/**
  ******************************************************************************
  * @file    LCD_Demo/main.c
  * @author  Yevgen Kovalyov
  * @version V1.0.1
  * @date    23-May-2019
  * @brief   Main program body
  ******************************************************************************
  */ 

/* Includes ------------------------------------------------------------------*/
#include "stm32f4_discovery.h"
#include "stm32_lcd_2x16.h"

#include <stdio.h>
/* Private typedef -----------------------------------------------------------*/

/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
void Delay(__IO uint32_t nCount);

void gpioa_init() {
	GPIO_InitTypeDef  GPIO_InitStructure;
	 /* GPIOD Periph clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	/* Configure PA15 in input mode */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  // external pullup
	GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void gpioc_init() {
	GPIO_InitTypeDef  GPIO_InitStructure;
    /* GPIOC Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	/* Configure PC6, PC8, PC9 and PC11 in input mode */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_8;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	//GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

const int GPIO_RGB_LEDS = GPIO_Pin_3;

void gpiod_init() {
	GPIO_InitTypeDef  GPIO_InitStructure;
	 /* GPIOD Periph clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	/* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15 | GPIO_RGB_LEDS;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
}

void gpioe_init() {
	GPIO_InitTypeDef  GPIO_InitStructure;
	 /* GPIOE Periph clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	 /* Configure PE9 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
}

void gpiod_blink() {
    /* PD12 to be toggled */
    GPIO_SetBits(GPIOD, GPIO_Pin_12);
    Delay(0x3FFFFF);
    
    /* PD13 to be toggled */
    GPIO_SetBits(GPIOD, GPIO_Pin_13);
    Delay(0x3FFFFF);
  
    /* PD14 to be toggled */
    GPIO_SetBits(GPIOD, GPIO_Pin_14);
    Delay(0x3FFFFF);
    
    /* PD15 to be toggled */
    GPIO_SetBits(GPIOD, GPIO_Pin_15);
    Delay(0x7FFFFF);
    
    GPIO_SetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
    
    /* Insert delay */
    Delay(0xFFFFFF);
}


/**
  * @brief  Delay Function.
  * @param  nCount:specifies the Delay time length.
  * @retval None
  */
void Delay(__IO uint32_t nCount)
{
    while(nCount--) {
    }
}

static void TIM3_init(void) {
	TIM_TimeBaseInitTypeDef tm;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	tm.TIM_Period = 65535;
	tm.TIM_Prescaler = 800;// 80MHz // old 48 MHz;
	tm.TIM_ClockDivision = 0;
	tm.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &tm);
}

void delay_10us(uint16_t us10) {
	TIM_SetCounter(TIM3, 0);
	TIM_Cmd(TIM3, ENABLE);
	while (TIM_GetCounter(TIM3) < us10) {
		;
	}
	//TIM_Cmd(TIM3, DISABLE);
}

void delay_ms(uint16_t ms) {
    delay_10us(ms*100);
}

uint8_t check = 0;
const uint16_t GPIO_Pin_DHT = GPIO_Pin_11;
const unsigned int DHT_wait0_cycles = 720000;
const unsigned int DHT_wait1_cycles = 720000;

void DHT_set_output(void)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    /* Configure GPIO pin output: PA11 */
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_DHT;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_Init(GPIOD, &GPIO_InitStruct);
}

void DHT_set_input (void)
{
    GPIO_InitTypeDef GPIO_InitStruct;

    /*Configure GPIO pin input: PD11 */
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_DHT;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_Init(GPIOD, &GPIO_InitStruct);
}

void DHT_start (void)
{
	DHT_set_output();  // set the pin as output
	GPIO_ResetBits(GPIOD, GPIO_Pin_DHT);   // pull the pin low
	delay_ms(18);   // wait for 18ms
	DHT_set_input();   // set as input
}

int DHT_get_bit(void) {
	return GPIOD->IDR & GPIO_Pin_DHT;
}


int tm_response_1;
int tm_response_0;

void DHT_check_response(void)
{
	int k;
	delay_10us(4);
	if (!DHT_get_bit())
	{
		delay_10us(8);
	    if (DHT_get_bit()) {
	    	tm_response_1 = TIM_GetCounter(TIM3);
	    	check = 1;
	    }
	}
	for (k=0; k<DHT_wait0_cycles; ++k) {
		if (!DHT_get_bit()) {
			// wait for the pin to go low
			tm_response_1 = TIM_GetCounter(TIM3);
			break;
		}
	}
}

uint8_t DHT_read_byte(void)
{
	uint8_t i = 0;
	uint8_t j;
	int k;
	for (j = 0x80; j; j >>= 1)
	{
		for (k=0; k<DHT_wait1_cycles  &&  !DHT_get_bit(); ++k);   // wait for the pin to go high
		delay_10us(4);   // wait for 40 us
		if (DHT_get_bit()) {   // if the pin is low
			i |= j;  // if the pin is high, write 1
		}
		for (k=0; k<DHT_wait0_cycles  &&  DHT_get_bit(); ++k);   // wait for the pin to go low
	}
	return i;
}

uint8_t DHT_read_word(void)
{
	uint16_t i = 0;
	uint16_t j;
	int k;
	for (j = 0x8000; j; j >>= 1)
	{
		for (k=0; k<DHT_wait1_cycles  &&  !DHT_get_bit(); ++k);   // wait for the pin to go high
		delay_10us(4);   // wait for 40 us
		if (DHT_get_bit()) {   // if the pin is low
			i |= j;  // if the pin is high, write 1
		}
		for (k=0; DHT_get_bit(); ++k) {
			// wait for the pin to go low
			if (k >= DHT_wait0_cycles) {
				return i;
			}
		}
	}
	return i;
}

#define NLEDS 24

uint8_t G[NLEDS];
uint8_t R[NLEDS];
uint8_t B[NLEDS];

void RGB_LEDS_tx_bit(uint16_t d1, uint16_t d0) {
	GPIO_SetBits(GPIOD, GPIO_RGB_LEDS);
    Delay(d1);
	GPIO_ResetBits(GPIOD, GPIO_RGB_LEDS);
    Delay(d0);
}

volatile uint8_t RGB_LED_cnt;
void RGB_LEDS_show_byte(uint8_t byte) {
	uint8_t bit;
	for (bit=0x80; bit; bit >>= 1) {
		GPIOD->BSRRL = GPIO_RGB_LEDS;
		if (byte & bit) {
		    RGB_LED_cnt = 6;
		    while(--RGB_LED_cnt) {
		    	;
		    }
			GPIOD->BSRRH = GPIO_RGB_LEDS;
			RGB_LED_cnt = 2;
			while(--RGB_LED_cnt) {
				;
			}
			//RGB_LEDS_tx_bit(1, 5);
		} else {
		    RGB_LED_cnt = 2;
		    while(--RGB_LED_cnt){
		    	;
		    }
			GPIOD->BSRRH = GPIO_RGB_LEDS;
			RGB_LED_cnt = 6;
			//RGB_LEDS_tx_bit(3, 3);
		}
		while(--RGB_LED_cnt){
			;
		}

	}
}

uint16_t tm_leds;
uint16_t nleds = 3;

void RGB_LEDS_show_all(void) {
	uint16_t t0 = TIM_GetCounter(TIM3);
	uint8_t  led;
	// uint8_t  bit;
	for (led=0; led < nleds  &&  led < NLEDS; ++led) {
		RGB_LEDS_show_byte(G[led]);
		RGB_LEDS_show_byte(R[led]);
		RGB_LEDS_show_byte(B[led]);
	}
	tm_leds = TIM_GetCounter(TIM3) - t0;
}

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
  char buf[64];
  int i;
  int j;
  uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
  uint8_t sum, sum_exp;
  //uint16_t RH, TEMP;
  int DHT_fails = 0;
  int DHT_decimator = 1;
  int led;

  gpioa_init();
  gpioc_init();
  gpiod_init();
  gpioe_init();
  TIM3_init();

  UB_LCD_2x16_Init();

  UB_LCD_2x16_Clear();

  gpiod_blink();

  // LCD Backlight on
  GPIO_SetBits(GPIOE, GPIO_Pin_9);

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();
  /* Configure the system clock */
  //SystemClock_Config();

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();

  //DWT_Delay_Init ();
  //HAL_Delay (1000);


  UB_LCD_2x16_String(0, 0, "0123456789ABCDEF");
  UB_LCD_2x16_String(0, 1, "GHIJKLMNOPQRSTUV");

  UB_LCD_2x16_String(0, 1, "STM32F4Discovery");

  UB_LCD_2x16_Clear();
  UB_LCD_2x16_String(0, 0, "LCD 2x16 STM32F4");
  UB_LCD_2x16_String(2, 1, "GL Demo:");

  UB_LCD_2x16_Clear();
  UB_LCD_2x16_String(6, 0, "Start");
  for(j=0; j<2*30; ++j) {
	// for(i=0; i<18000000; ++i);
	// delay_ms(500);
  }
 // UB_LCD_2x16_String(6, 0, "Stop ");
 // for(i=0; i<18000000; ++i) {
 //	  ;
 //}

  UB_LCD_2x16_Clear();
  UB_LCD_2x16_String(0, 0, ">");
  UB_LCD_2x16_String(15, 1, "<");
  delay_ms(100);
  for(i=0; i<15; ++i) {
	  UB_LCD_2x16_String(i, 0, " >");
	  UB_LCD_2x16_String(14-i, 1, "< ");
	  delay_ms(100);
  }

  UB_LCD_2x16_Clear();
  UB_LCD_2x16_String(0, 0, "LCD 2x16 STM32F4");
  UB_LCD_2x16_String(2, 1, "GL Demo");


  for(j=0; j<3; ++j) {
	  // LCD Backlight off
    GPIO_ResetBits(GPIOE, GPIO_Pin_9);
    delay_ms(500);
    GPIO_SetBits(GPIOE, GPIO_Pin_9);
    delay_ms(500);
  }

  for (led=0; led<NLEDS; ++led) {
	  G[led] = 0xff;
	  R[led] = 0x00;
	  B[led] = 0x00;
  }


  for(i=0; ; ++i) {

	  if (--DHT_decimator <= 0) {
         DHT_start();
	     DHT_check_response();
	     Rh_byte1 = DHT_read_byte();
	     Rh_byte2 = DHT_read_byte();
	     Temp_byte1 = DHT_read_byte();
	     Temp_byte2 = DHT_read_byte();
	     sum = DHT_read_byte();
	     sum_exp = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
         if (sum == sum_exp) {
         } else {
            ++DHT_fails;  // checksum is wrong
         }

         sprintf(buf, "Humidity:%d%%   ", Rh_byte1);
         buf[16] = '\0';
         UB_LCD_2x16_String(0, 0, buf);
         //sprintf(buf, "%d R:%d T:%d %d ", i, Rh_byte1, Temp_byte1, DHT_fails);
	     sprintf(buf, "Temp:%dC %d    ", Temp_byte1, DHT_fails);
         buf[12] = '\0';
	     UB_LCD_2x16_String(0, 1, buf);


	     RGB_LEDS_show_all();
	     DHT_decimator = 20;
	 }

	 buf[0] = GPIOC->IDR & GPIO_Pin_9 ? ' ' : '<';
	 buf[1] = GPIOC->IDR & GPIO_Pin_8 ? ' ' : 'v';
	 buf[2] = GPIOA->IDR & GPIO_Pin_15 ? ' ' : '*';
     buf[3] = GPIOC->IDR & GPIO_Pin_6 ? ' ' : '^';
     buf[4] = GPIOC->IDR & GPIO_Pin_11 ? ' ' : '>';
     buf[5] = '\0';
     UB_LCD_2x16_String(11, 1, buf);
     delay_ms(100);
   }
}


#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif


